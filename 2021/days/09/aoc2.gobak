package main

import (
	"fmt"
	"strconv"
	"time"

	"github.com/dkim/aoc/2021/utils"
)

func part1(text []string) {
	defer utils.TimeTrack(time.Now(), "Part 1")
	var numbers []int
	rowSize := len(text[0])
	sum := 0
	for _, line := range text {
		for _, digit := range line {
			number, _ := strconv.Atoi(string(digit))
			numbers = append(numbers, number)
		}
	}
	for i := 0; i < len(numbers); i++ {
		fmt.Printf("Inspecting %d\n", numbers[i])
		isLowest := true
		// Left hand cases
		if i%rowSize > 0 { // can't check left border
			fmt.Printf("Check directly left: %d\n", numbers[i-1])
			if numbers[i-1] < numbers[i] { // directly left
				isLowest = false
				continue
			} else if i > rowSize && numbers[i-rowSize-1] < numbers[i] { // top left
				isLowest = false
				continue
			} else if i < len(numbers)-rowSize && numbers[i+rowSize-1] < numbers[i] { // bottom left
				isLowest = false
				continue
			} else {
				fmt.Printf("Left border number\n")
			}
			// Right hand cases
			if i%rowSize != 9 { // can't check right border
				if numbers[i+1] >= numbers[i] { // directly right
					isLowest = false
					continue
				}
				if i > rowSize {
					if numbers[i+1-rowSize] >= numbers[i] { // top right
						isLowest = false
						continue
					}
				}
				if i < len(numbers)-rowSize {
					if numbers[i+1+rowSize] >= numbers[i] { //bottom right
						isLowest = false
						continue
					}
				}
			} else
			// Middle cases
			if i > rowSize {
				if numbers[i-rowSize] >= numbers[i] { // top
					isLowest = false
					continue
				}
			} else if i < len(numbers)-rowSize {
				if numbers[i+rowSize] >= numbers[i] { // bottom
					isLowest = false
					continue
				}
			}

		}
		if isLowest {
			fmt.Println(numbers[i])
			sum += numbers[i]
		}
	}
	fmt.Println(sum)

}

func part2(text []string) {
	defer utils.TimeTrack(time.Now(), "Part 2")
}

func main() {

	text := utils.ReadInput(0)
	part1(text)
	part2(text)

}
